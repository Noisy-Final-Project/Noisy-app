#+title: Api

* Purpose
This document defines which API requests and responses are available and how to formulate
an API request or response.
* Requests and Responses
** Controller to Model
*** Authentication
**** DONE Sign up
In this case, controller will send the details:
1. Email
2. Name
3. DOB
4. Password (in hash)

_Response:_
A JSON file with two fields.
First field will be boolean, second field message (in case of an error).
Model needs to send False if the email exists in database ( message will be added accordingly ).
Otherwise, add the user to the database and sends a confirmation (True).
**** DONE Sign in
Controller sends a json file:
1. Email
2. Hashed password

_Response_:
Model returns a JSON file if false, a cookie if successful.
Model checks email exists, if it doesn't return False.
If email exists, check hashed password equal to hashed password in database for that email.
If equal, return cookie.
*** Reviews
**** DONE List of reviews for a specific location
Controller sends a JSON:
1. Name of location
2. Lat/Lon

_Response_:
Model sends back a JSON that will contain locations, each of them will be a JSON
with corresponding details of each review.
#+begin_src js
{
  review1: {
        _userName;
        _userText;
        _userSoundVolume;
        _userSoundOpinion;
        _labelsAttached;
        _locationID;

  }
    review2: {
        _userName;
        _userText;
        _userSoundVolume;
        _userSoundOpinion;
        _labelsAttached;
        _locationID;
  }
}
#+end_src

**** DONE Insert a review
Controller sends a JSON that will contain (in that order):
#+begin_src js
{
  review1: {
        _userEmail;
        _userText;
        _userSoundVolume;
        _userSoundOpinion;
        _labelsAttached;
        _locationArray; // contains longtitude and latitude
        _locationName;
  }
}
#+end_src

Model response:
Success or failure.
**** DONE Location based geographical area
View background: Users views the map on a certain area. Shani needs to extract the center of the
map and the radius based on the current zoom of the map. Sends that information to Controller.
Controller sends a JSON:
#+begin_src js
{
  loc: [lat, lon],
  radius
        }
#+end_src

_Model response_:
A JSON file:
#+begin_src js
{
  location1:{
        loc: [lat,lon] array,
        location_name: string,
        reviewAmount; int
    }
  location2:{
        loc: [lat,lon] array,
        location_name: string,
        reviewAmount; int
    }
}
#+end_src
**** DONE Reviews per location
Controller sends the JSON:
#+begin_src js
{
  loc: [lat,lon],
  name: string,
  indices : [start,end],
}
#+end_src

_Model response:_
The list should be sorted (descending) based on createdOn field.
Based on the indices of the =start= and =end=.
#+begin_src js
{
            review1:{
              _createdOn;
              _userEmail;
                _userText;
                _userSoundVolume;
                _userSoundOpinion;
                _labelsAttached;
            }
            review2:{
              _createdOn;
              _userEmail;
                _userText;
                _userSoundVolume;
                _userSoundOpinion;
                _labelsAttached;
            }
}
#+end_src
** Model to Controller

** TODO View to Controller
*** Authentication
**** DONE Sign up
In this case, view will send the details:
1. Email
2. Name
3. DOB
4. Password (in hash)

_Response:_
A JSON file with two fields.
First field will be boolean, second field message (in case of an error).
Controller needs to send False if the email exists in database ( message will be added accordingly ).
Otherwise, add the user to the database and sends a confirmation (True).
**** DONE Sign in
View sends a json file to controller:
1. Email
2. Hashed password

_Response_:
Controller returns a JSON file if false, a cookie if successful.
Controller checks email exists, if it doesn't return False.
If email exists, check hashed password equal to hashed password in database for that email.
If equal, return cookie.
*** Reviews
**** DONE Insert a review
View sends a JSON that will contain (in that order):
#+begin_src js
{
  review1: {
        _userEmail;
        _userText;
        _userSoundVolume;
        _userSoundOpinion;
        _labelsAttached;
        _locationArray; // contains longtitude and latitude
        _locationName;
  }
}
#+end_src

Controller response:
Success or failure.
**** DONE Location based geographical area
View background: Users views the map on a certain area. Shani needs to extract the center of the
map and the radius based on the current zoom of the map. Sends that information to Controller.
View sends a JSON:
#+begin_src js
{
  loc: [lat, lon], // center of map
  radius // limits of the map
        }
#+end_src

_Controller response_:
A JSON file:
#+begin_src js
{
  location1:{
        loc: [lat,lon] array,
        location_name: string,
        reviewAmount; int
    }
  location2:{
        loc: [lat,lon] array,
        location_name: string,
        reviewAmount; int
    }
}
#+end_src
**** DONE Reviews per location
Controller sends the JSON:
#+begin_src js
{
  loc: [lat,lon],
  name: string,
  indices : [start,end],
}
#+end_src

_Model response:_
The list should be sorted (descending) based on createdOn field.
Based on the indices of the =start= and =end=.
#+begin_src js
{
            review1:{
              _createdOn;
              _userEmail;
                _userText;
                _userSoundVolume;
                _userSoundOpinion;
                _labelsAttached;
            }
            review2:{
              _createdOn;
              _userEmail;
                _userText;
                _userSoundVolume;
                _userSoundOpinion;
                _labelsAttached;
            }
}
#+end_src
**** DONE Search location by name
View sends controller:
#+begin_src js
{
    locationName,
    }
#+end_src


Controller sends back JSON:
#+begin_src js
{
location1: {
    _name,
    _loc,
    _amountReviews
}}
#+end_src

* Format for additional details
We describe the format for additional details:
#+begin_src js
userDetails = {
        userName: <string>, //can be empty, anonymous
        dob: <string>
        }

locationDetails = {
        name : <string>,
        id: <string>,
        addres: <json, tomom object>,
        lnglat: [lang,lat],
        category:<string>
        }
reviewDetails = {
        locationID: <string>,
        userID: <string>,
        userText: <string>,
        soundOpinion: <double>,
        soundLevel: <double>,
        labels: <Array<string>>,
        }
#+end_src
As for the tomtom address object[[https://developer.tomtom.com/search-api/documentation/geocoding-service/geocode#response-data][Link]]
